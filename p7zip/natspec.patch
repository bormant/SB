diff --git a/CPP/7zip/Archive/Zip/ZipIn.cpp b/CPP/7zip/Archive/Zip/ZipIn.cpp
index 345fbf5..d170707 100644
--- a/CPP/7zip/Archive/Zip/ZipIn.cpp
+++ b/CPP/7zip/Archive/Zip/ZipIn.cpp
@@ -2,6 +2,9 @@
 
 #include "StdAfx.h"
 
+#include <iconv.h>
+#include <natspec.h>
+
 // #include <stdio.h>
 
 #include "../../../Common/DynamicBuffer.h"
@@ -13,6 +16,8 @@
 
 #include "ZipIn.h"
 
+#include "myPrivate.h"	// global_use_utf16_conversion
+
 #define Get16(p) GetUi16(p)
 #define Get32(p) GetUi32(p)
 #define Get64(p) GetUi64(p)
@@ -91,6 +96,10 @@ HRESULT CInArchive::Open(IInStream *stream, const UInt64 *searchHeaderSizeLimit)
   RINOK(FindAndReadMarker(stream, searchHeaderSizeLimit));
   RINOK(stream->Seek(m_Position, STREAM_SEEK_SET, NULL));
   Stream = stream;
+
+
+  /* Guess archive filename charset */
+  archive_oem_charset = natspec_get_charset_by_locale(NATSPEC_DOSCS, "");
   return S_OK;
 }
 
@@ -445,6 +454,17 @@ void CInArchive::ReadFileName(unsigned size, AString &s)
   s.ReleaseBuffer();
 }
 
+void CInArchive::RecodeFileName(CItem &item) {
+  char *p;
+
+  /* Convert filename from archive charset to current locale's charset */
+  p = natspec_convert(item.Name.Ptr(), NULL, archive_oem_charset, 0);
+  if (p) {
+    item.Name = p;
+    free(p);
+  }
+}
+
 bool CInArchive::ReadExtra(unsigned extraSize, CExtraBlock &extraBlock,
     UInt64 &unpackSize, UInt64 &packSize, UInt64 &localHeaderOffset, UInt32 &diskStartNumber)
 {
@@ -565,6 +585,7 @@ bool CInArchive::ReadLocalItem(CItemEx &item)
   }
   if (item.Name.Len() != nameSize)
     return false;
+  RecodeFileName(item);
   return item.LocalFullHeaderSize <= ((UInt32)1 << 16);
 }
 
@@ -738,6 +759,7 @@ HRESULT CInArchive::ReadCdItem(CItemEx &item)
   item.ExternalAttrib = Get32(p + 34);
   item.LocalHeaderPos = Get32(p + 38);
   ReadFileName(nameSize, item.Name);
+  RecodeFileName(item);
   
   if (extraSize > 0)
   {
diff --git a/CPP/7zip/Archive/Zip/ZipIn.h b/CPP/7zip/Archive/Zip/ZipIn.h
index f6b349b..834d3f5 100644
--- a/CPP/7zip/Archive/Zip/ZipIn.h
+++ b/CPP/7zip/Archive/Zip/ZipIn.h
@@ -184,6 +184,9 @@ public:
       return false;
     return true;
   }
+
+  const char *archive_oem_charset;
+  void RecodeFileName(CItem &item);
 };
   
 }}
diff --git a/CPP/7zip/Archive/Zip/ZipOut.cpp b/CPP/7zip/Archive/Zip/ZipOut.cpp
index 2a1ba2c..afd1fde 100644
--- a/CPP/7zip/Archive/Zip/ZipOut.cpp
+++ b/CPP/7zip/Archive/Zip/ZipOut.cpp
@@ -2,10 +2,15 @@
 
 #include "StdAfx.h"
 
+#include <iconv.h>
+#include <natspec.h>
+
 #include "../../Common/OffsetStream.h"
 
 #include "ZipOut.h"
 
+#include "myPrivate.h" // global_use_utf16_conversion
+
 namespace NArchive {
 namespace NZip {
 
@@ -18,9 +23,23 @@ HRESULT COutArchive::Create(IOutStream *outStream)
   m_OutBuffer.SetStream(outStream);
   m_OutBuffer.Init();
 
+  /* Guess archive filename charset */
+  archive_oem_charset = natspec_get_charset_by_locale(NATSPEC_DOSCS, "");
+
   return m_Stream->Seek(0, STREAM_SEEK_CUR, &m_Base);
 }
 
+void COutArchive::RecodeFileName(CItem &item) {
+  char *p;
+
+  /* Convert filename from current locale charset to archive charset. */
+  p = natspec_convert(item.Name.Ptr(), archive_oem_charset, NULL, 0);
+  if (p) {
+    item.Name = p;
+    free(p);
+  }
+}
+
 void COutArchive::MoveCurPos(UInt64 distanceToMove)
 {
   m_CurPos += distanceToMove; // test overflow
diff --git a/CPP/7zip/Archive/Zip/ZipOut.h b/CPP/7zip/Archive/Zip/ZipOut.h
index eaaa032..d3a7f33 100644
--- a/CPP/7zip/Archive/Zip/ZipOut.h
+++ b/CPP/7zip/Archive/Zip/ZipOut.h
@@ -81,6 +81,9 @@ public:
 
   void CreateStreamForCompressing(IOutStream **outStream);
   void CreateStreamForCopying(ISequentialOutStream **outStream);
+
+  const char *archive_oem_charset;
+  void RecodeFileName(CItem &item);
 };
 
 }}
diff --git a/CPP/7zip/Archive/Zip/ZipUpdate.cpp b/CPP/7zip/Archive/Zip/ZipUpdate.cpp
index 38f41b9..09d521a 100644
--- a/CPP/7zip/Archive/Zip/ZipUpdate.cpp
+++ b/CPP/7zip/Archive/Zip/ZipUpdate.cpp
@@ -32,12 +32,12 @@ using namespace NSynchronization;
 namespace NArchive {
 namespace NZip {
 
+/*
+ * Create DOS-compatible archives on both UNIX and Windows, to force unpackers
+ * to not recode file names from OEM to Windows encoding.
+ */
 static const Byte kHostOS =
-  #ifdef _WIN32
   NFileHeader::NHostOS::kFAT;
-  #else
-  NFileHeader::NHostOS::kUnix;
-  #endif
 
 static const Byte kMadeByHostOS = kHostOS;
 static const Byte kExtractHostOS = kHostOS;
@@ -83,6 +83,7 @@ static void SetFileHeader(
     item.Ntfs_ATime = ui.Ntfs_ATime;
     item.Ntfs_CTime = ui.Ntfs_CTime;
     item.NtfsTimeIsDefined = ui.NtfsTimeIsDefined;
+    archive.RecodeFileName(item);
   }
   else
     isDir = item.IsDir();
@@ -353,6 +354,7 @@ static HRESULT UpdateItemOldData(
     item.Ntfs_ATime = ui.Ntfs_ATime;
     item.Ntfs_CTime = ui.Ntfs_CTime;
     item.NtfsTimeIsDefined = ui.NtfsTimeIsDefined;
+    archive.RecodeFileName(item);
 
     item.CentralExtra.RemoveUnknownSubBlocks();
     item.LocalExtra.RemoveUnknownSubBlocks();
diff --git a/makefile.linux_amd64_asm b/makefile.linux_amd64_asm
index 95ac8ab..7f0c360 100644
--- a/makefile.linux_amd64_asm
+++ b/makefile.linux_amd64_asm
@@ -19,7 +19,7 @@ ASM=yasm -f elf -m amd64 -Dx64
 
 PRE_COMPILED_HEADER=StdAfx.h.gch
 
-LOCAL_LIBS=-lpthread
+LOCAL_LIBS=-lpthread -lnatspec
 LOCAL_LIBS_DLL=$(LOCAL_LIBS) -ldl
 
 CPU=x64
diff --git a/makefile.linux_any_cpu_gcc_4.X b/makefile.linux_any_cpu_gcc_4.X
index 148cda1..56039bf 100644
--- a/makefile.linux_any_cpu_gcc_4.X
+++ b/makefile.linux_any_cpu_gcc_4.X
@@ -19,7 +19,7 @@ LINK_SHARED=-fPIC -shared
 
 PRE_COMPILED_HEADER=StdAfx.h.gch
 
-LOCAL_LIBS=-lpthread
+LOCAL_LIBS=-lpthread -lnatspec
 LOCAL_LIBS_DLL=$(LOCAL_LIBS) -ldl
 
 OBJ_CRC32=$(OBJ_CRC32_C)
diff --git a/makefile.linux_x86_asm_gcc_4.X b/makefile.linux_x86_asm_gcc_4.X
index e783739..591025d 100644
--- a/makefile.linux_x86_asm_gcc_4.X
+++ b/makefile.linux_x86_asm_gcc_4.X
@@ -22,7 +22,7 @@ ASM=nasm -f elf
 
 PRE_COMPILED_HEADER=StdAfx.h.gch
 
-LOCAL_LIBS=-lpthread
+LOCAL_LIBS=-lpthread -lnatspec
 LOCAL_LIBS_DLL=$(LOCAL_LIBS) -ldl
 
 CPU=x86
--- a/makefile.machine	2015-04-08 18:08:36.095251300 +0300
+++ b/makefile.machine	2015-04-08 18:08:47.547428585 +0300
@@ -15,7 +15,7 @@
 CC_SHARED=-fPIC
 LINK_SHARED=-fPIC -shared
 
-LOCAL_LIBS=-lpthread
+LOCAL_LIBS=-lpthread -lnatspec
 LOCAL_LIBS_DLL=$(LOCAL_LIBS) -ldl
 
 OBJ_CRC32=$(OBJ_CRC32_C)
